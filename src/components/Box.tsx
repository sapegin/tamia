import {
	createElement,
	useMemo,
	type ElementType,
	type RefObject,
} from 'react';
import { type HTMLStyledProps } from '../../styled-system/jsx';
import {
	splitProps,
	normalizeHTMLProps,
} from '../../styled-system/helpers.mjs';
import { isCssProperty } from '../../styled-system/jsx/is-valid-prop.mjs';
import { css as cssFn, cx, type Styles } from '../../styled-system/css';

// React components generated by Panda doesn't have `as` prop
// This is exact copy of Panda's Box component but with the `as` prop

export interface AsProp<C extends ElementType> {
	/** HTML element to render the box */
	as?: C;
}

export interface RefProp<C extends ElementType> {
	/** Ref to pass to the underlying HTML element */
	innerRef?: RefObject<C>;
}

export type BoxProps<C extends ElementType> = HTMLStyledProps<C> &
	AsProp<C> &
	RefProp<C>;

/**
 * Generic styled component factory.
 *
 * function Box({as, ...props}) {
 *   return createBox(as ?? 'div', props);
 * }
 */
export function createBox<C extends ElementType>(
	{ as, innerRef, className, css, ...props }: BoxProps<C>,
	/** Default HTML element. */
	defaultElement: ElementType = 'div'
) {
	const [htmlProps, styleProps, elementProps] = useMemo(
		() => splitProps(props, normalizeHTMLProps.keys, isCssProperty),
		[props]
	);

	return createElement(as ?? defaultElement, {
		ref: innerRef,
		...elementProps,
		...normalizeHTMLProps(htmlProps),
		className: cx(cssFn(styleProps as Styles, css), className),
	});
}

/**
 * Generic container with responsive props to control whitespace, layout,
 * positioning and colors.
 */
export function Box<C extends ElementType>(props: BoxProps<C>) {
	return createBox<C>(props);
}
